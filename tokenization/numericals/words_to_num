def replace_numbers(text):
  """
    Replace numbers in a string with their numeric representation.
  """
  units = {
        'a': 1,
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9,
        'ten': 10,
        'eleven': 11,
        'twelve': 12,
        'thirteen': 13,
        'fourteen': 14,
        'fifteen': 15,
        'sixteen': 16,
        'seventeen': 17,
        'eighteen': 18,
        'nineteen': 19
    }
    
  tens = {
        'twenty': 20,
        'thirty': 30,
        'forty': 40,
        'fifty': 50,
        'sixty': 60,
        'seventy': 70,
        'eighty': 80,
        'ninety': 90
    }
    
  hundreds = {'hundred': 100}
    
  scales = {
        'thousand': 1000,
        'million': 1e6,
        'billion': 1e9,
        'trillion': 1e12
    }
    
  fractions = {
        'half': 0.5,
        'quarter': 0.25,
        'third': 1/3,
        'fourth': 0.25,
        'fifth': 0.2,
        'sixth': 1/6,
        'seventh': 1/7,
        'eighth': 0.125,
        'ninth': 1/9,
        'tenth': 0.1
    }
    
  def words_to_num(words):
        # Check for fraction a scale pattern (e.g., 'half a million')
        if len(words) >= 3:
            first, second, third = words[0].lower(), words[1].lower(), words[2].lower()
            if first in fractions and second == 'a' and third in scales:
                return fractions[first] * scales[third]

        total = 0
        current = 0
        for word in words:
            lword = word.lower()
            if lword in units:
                current += units[lword]
            elif lword in tens:
                current += tens[lword]
            elif lword in hundreds:
                if current == 0:
                    current = hundreds[lword]
                else:
                    current *= hundreds[lword]
            elif lword in scales:
                scale = scales[lword]
                if current == 0:
                    current = 1
                total += current * scale
                current = 0
            else:
                return None
        total += current
        return total

  words = text.split()
  i = 0
  new_words = []
  while i < len(words):
        matched = False
        # Check sequences from longest to shortest
        for j in range(len(words), i, -1):
            segment = words[i:j]
            num = words_to_num(segment)
            if num is not None:
                # Format the number appropriately
                if isinstance(num, float):
                    if num.is_integer():
                        new_words.append(str(int(num)))
                    else:
                        new_words.append(str(num))
                else:
                    new_words.append(str(num))
                i = j
                matched = True
                break
        if not matched:
            new_words.append(words[i])
            i += 1
  return ' '.join(new_words)