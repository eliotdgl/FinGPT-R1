import re

def is_number(tokens : str) -> bool:
  """
    Check wether the token is a number
  """    
  return bool(re.fullmatch(r"-?\d+(\.\d+)?([ ]?\d+)?", tokens))

def round_number(tokens : str) -> str:
  """
    Round the number keeping only the first half of the digits
  """
  precision = len(tokens) // 2
  if bool(re.search(r"\.", tokens)):
    [integ, decim] = tokens.split('.', 1) if '.' in tokens else [tokens, ""]
    if len(integ) >= precision:
      result = integ[:precision] + ("#" * (len(integ) - precision))
    elif len(integ) + len(decim) >= precision:
      result = integ + "." + decim[:precision - len(integ)]
    else:
      result = tokens
  else:
    result = tokens[:precision] + ("#" * (len(tokens) - precision))
  return result

print("We can identify numbers:")
print("Is 1234 a number ?", is_number("123"))
print("Is 1.234 a number ?", is_number("1.23"))
print("Is 1 234 a number ?", is_number("1 234"))
print("Is number a number ?", is_number("number"))
print("We round up the length of numbers so our tokenizer can handle them:")
print("Rounded 1234 to", round_number("1234"))
print("Rounded 1.234 to", round_number("1.234"))
print("Rounded 123456.7", round_number("123456.7"))
print("Rounded 1.234567", round_number("1.234567"))
